{"version":3,"sources":["index.js"],"names":["OPENID_ISSUER","process","env","ignoredRoutes","useridCallbackPath","openidCallbackPath","authEnabled","ensureLogin","afterLogoutUrl","push","passport","serializeUser","user","cb","deserializeUser","discoverIssuerWithRetries","retries","Promise","resolve","reject","Issuer","discover","then","issuer","log","info","error","Error","authMiddleware","req","res","next","includes","path","Object","keys","query","filter","key","forEach","authCallback","tokenSet","done","claims","sub","userinfo","authenticate","router","set","exit","openidIssuer","client","Client","client_id","OPENID_CLIENT_ID","params","response_type","scope","use","Strategy","ignore","Array","isArray"],"mappings":"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","sourcesContent":["import { ensureLoggedIn } from 'connect-ensure-login';\nimport { Strategy, Issuer } from 'openid-client';\nimport passport from 'passport';\n\nimport {\n  applyMiddleware,\n  openidCallbackPath,\n  useridCallbackPath,\n  afterLogoutUrl,\n} from './endpoints';\n\nimport { checkEnvironment } from './util';\nimport log from './logger';\n\nconst OPENID_ISSUER = process.env.OPENID_ISSUER || 'https://federate-qa.xh1.lilly.com';\n\nconst ignoredRoutes = ['/login', useridCallbackPath, openidCallbackPath];\nconst authEnabled = checkEnvironment();\nconst ensureLogin = ensureLoggedIn();\n\nif (afterLogoutUrl !== '/') {\n  ignoredRoutes.push(afterLogoutUrl);\n}\n\npassport.serializeUser((user, cb) => {\n  cb(null, user);\n});\n\npassport.deserializeUser((user, cb) => {\n  cb(null, user);\n});\n\nexport const discoverIssuerWithRetries = async (retries = 5) => new Promise((resolve, reject) => {\n  Issuer.discover(OPENID_ISSUER).then((issuer) => {\n    log.info(`Discovered issuer: ${OPENID_ISSUER}`);\n    resolve(issuer);\n  }).catch(async () => {\n    if (retries <= 0) {\n      log.error('Could not discover OpenID issuer!');\n      reject(new Error('Could not discover OpenID issuer'));\n    } else {\n      log.info('Could not discover OpenID issuer, retrying...');\n      const issuer = discoverIssuerWithRetries(retries - 1);\n      resolve(issuer);\n    }\n  });\n});\n\n/**\n * middleware that authenticates the express router\n * @param  {Object}   req  request object from express router\n * @param  {Object}   res  response object from express router\n * @param  {Function} next function to move on to the next bit of middleware\n */\nexport const authMiddleware = async (req, res, next) => {\n  // allow a user through if we've disabled auth or they've ignored a route\n  if (!authEnabled || ignoredRoutes.includes(req.path)) {\n    // pass through to next request\n    log.info(`Serving ${req.path} to verified user`);\n\n    Object.keys(req.query || {})\n      .filter((key) => key !== 'id_token')\n      .forEach((key) => log.info(`Param ${key}: ${req.query[key]}`));\n\n    return next();\n  }\n\n  return ensureLogin(req, res, next);\n};\n\n/**\n * Handles the callback for the Passport authentication strategy\n * @param {Object} tokenSet Tokenset returned from the Passport strategy\n * @param {Function} done Passport-provided callback\n */\nexport const authCallback = (tokenSet, done) => {\n  log.info(`User has been authenticated: ${tokenSet.claims.sub}`);\n  tokenSet.claims = tokenSet.claims();\n  tokenSet.sub = tokenSet.claims.sub;\n  tokenSet.userinfo = {};\n  return done(null, tokenSet);\n};\n\n/**\n * Adds middlewares to the router to handle auth\n * Adds our custom authMiddle to an express router\n * @param  {Router} router Express Router/App\n */\nexport const authenticate = async (router) => {\n  // this will ensure heroku gets the correct protocol\n  router.set('trust proxy', true);\n\n  // set up any middleware that we want the user to have access to, unauthenticated\n  applyMiddleware(router, authEnabled, authMiddleware);\n\n  if (!authEnabled) {\n    return router;\n  }\n\n  const openidIssuer = await discoverIssuerWithRetries()\n    .catch(() => {\n      log.error(`Could not discover issuer: ${OPENID_ISSUER}`);\n      log.error('Check that you have spelled the URL correctly, and that the internet is up.');\n      process.exit(1);\n    });\n\n  const client = new openidIssuer.Client({\n    client_id: process.env.OPENID_CLIENT_ID,\n  });\n\n  const params = {\n    response_type: 'id_token',\n    scope: 'openid auth_web',\n  };\n\n  passport.use('oidc', new Strategy({ client, params }, authCallback));\n\n  return router;\n};\n\n/**\n * Adds routes to the list of ignored routes\n */\nexport const ignore = (...ignoredRoutesIn) => {\n  if (Array.isArray(ignoredRoutesIn[0])) {\n    ignoredRoutes.push(...ignoredRoutesIn[0]);\n  } else {\n    ignoredRoutes.push(...ignoredRoutesIn);\n  }\n\n  return ignoredRoutes;\n};\n"],"file":"index.js"}