{"version":3,"sources":["endpoints.js"],"names":["cookieSecret","clientAuth","path","join","__dirname","openidCallbackPath","process","env","OPENID_CALLBACK_ENDPOINT","useridCallbackPath","USERID_ENDPOINT","logoutEndpointPath","LOGOUT_ENDPOINT","afterLogoutUrl","AFTER_LOGOUT_URL","applyMiddleware","router","authEnabled","authMiddleware","use","bodyParser","json","urlencoded","extended","secret","resave","saveUninitialized","passport","initialize","session","req","res","next","redirectUri","protocol","get","state","originalUrl","authenticate","redirect_uri","redirect","logout","query","id_token","successRedirect","returnTo","failureRedirect","sendFile","userid","user","sub","auth_set","user_authed"],"mappings":"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","sourcesContent":["import cookieParser from 'cookie-parser';\nimport session from 'express-session';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport path from 'path';\n\nimport { generateNonce } from './util';\n\nconst cookieSecret = generateNonce();\nconst clientAuth = path.join(__dirname, 'authClientSide.html');\n\nexport const openidCallbackPath = process.env.OPENID_CALLBACK_ENDPOINT || '/auth/ping/callback';\nexport const useridCallbackPath = process.env.USERID_ENDPOINT || '/auth/userid';\nexport const logoutEndpointPath = process.env.LOGOUT_ENDPOINT || '/logout';\nexport const afterLogoutUrl = process.env.AFTER_LOGOUT_URL || '/';\n\nexport const applyMiddleware = (router, authEnabled, authMiddleware) => {\n  if (authEnabled) {\n    // setup express middleware to reading responses to and from federate/client\n    router.use(cookieParser(cookieSecret));\n    router.use(bodyParser.json());\n    router.use(bodyParser.urlencoded({ extended: true }));\n\n    router.use(session({ secret: cookieSecret, resave: false, saveUninitialized: false }));\n    router.use(passport.initialize());\n    router.use(passport.session());\n\n    // set up auth checking middleware\n    router.use(authMiddleware);\n\n    router.use('/login',\n      (req, res, next) => {\n        const redirectUri = `${req.protocol}://${req.get('host')}${openidCallbackPath}`;\n        const state = req.originalUrl;\n\n        return passport.authenticate('oidc', { redirect_uri: redirectUri, state })(req, res, next);\n      },\n      (req, res) => {\n        res.redirect(req.originalUrl || '/');\n      });\n\n    router.get(logoutEndpointPath,\n      (req, res) => {\n        req.logout();\n        res.redirect(afterLogoutUrl);\n      });\n\n    router.use(openidCallbackPath, (req, res, next) => {\n      const redirectUri = `${req.protocol}://${req.get('host')}${openidCallbackPath}`;\n\n      // if there is no id token, it means we need to use client side js to get the hash parameter\n      if (req.query.id_token) {\n        const successRedirect = req.session.returnTo || '/';\n\n        return passport.authenticate(\n          'oidc',\n          { successRedirect, failureRedirect: '/', redirect_uri: redirectUri },\n        )(req, res, next);\n      }\n\n      return res.sendFile(clientAuth);\n    });\n  }\n\n  // when a request for the userid is made, send it\n  // default let the user know if they're logged in or not, and if auth is set\n  router.get(useridCallbackPath, (req, res) => {\n    const userid = (req.user || {}).sub || 'no-authenticated-user';\n\n    res.json({\n      userid,\n      auth_set: authEnabled,\n      user_authed: !!req.user,\n    });\n  });\n};\n"],"file":"endpoints.js"}