"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyMiddleware = exports.afterLogoutUrl = exports.logoutEndpointPath = exports.useridCallbackPath = exports.openidCallbackPath = void 0;

var _cookieParser = _interopRequireDefault(require("cookie-parser"));

var _expressSession = _interopRequireDefault(require("express-session"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _passport = _interopRequireDefault(require("passport"));

var _path = _interopRequireDefault(require("path"));

var _util = require("./util");

var cookieSecret = (0, _util.generateNonce)();

var clientAuth = _path["default"].join(__dirname, 'authClientSide.html');

var openidCallbackPath = process.env.OPENID_CALLBACK_ENDPOINT || '/auth/ping/callback';
exports.openidCallbackPath = openidCallbackPath;
var useridCallbackPath = process.env.USERID_ENDPOINT || '/auth/userid';
exports.useridCallbackPath = useridCallbackPath;
var logoutEndpointPath = process.env.LOGOUT_ENDPOINT || '/logout';
exports.logoutEndpointPath = logoutEndpointPath;
var afterLogoutUrl = process.env.AFTER_LOGOUT_URL || '/';
exports.afterLogoutUrl = afterLogoutUrl;

var applyMiddleware = function applyMiddleware(router, authEnabled, authMiddleware) {
  if (authEnabled) {
    // setup express middleware to reading responses to and from federate/client
    router.use((0, _cookieParser["default"])(cookieSecret));
    router.use(_bodyParser["default"].json());
    router.use(_bodyParser["default"].urlencoded({
      extended: true
    }));
    router.use((0, _expressSession["default"])({
      secret: cookieSecret,
      resave: false,
      saveUninitialized: false
    }));
    router.use(_passport["default"].initialize());
    router.use(_passport["default"].session()); // set up auth checking middleware

    router.use(authMiddleware);
    router.use('/login', function (req, res, next) {
      var redirectUri = "".concat(req.protocol, "://").concat(req.get('host')).concat(openidCallbackPath);
      var state = req.originalUrl;
      return _passport["default"].authenticate('oidc', {
        redirect_uri: redirectUri,
        state: state
      })(req, res, next);
    }, function (req, res) {
      res.redirect(req.originalUrl || '/');
    });
    router.get(logoutEndpointPath, function (req, res) {
      req.logout();
      res.redirect(afterLogoutUrl);
    });
    router.use(openidCallbackPath, function (req, res, next) {
      var redirectUri = "".concat(req.protocol, "://").concat(req.get('host')).concat(openidCallbackPath); // if there is no id token, it means we need to use client side js to get the hash parameter

      if (req.query.id_token) {
        var successRedirect = req.session.returnTo || '/';
        return _passport["default"].authenticate('oidc', {
          successRedirect: successRedirect,
          failureRedirect: '/',
          redirect_uri: redirectUri
        })(req, res, next);
      }

      return res.sendFile(clientAuth);
    });
  } // when a request for the userid is made, send it
  // default let the user know if they're logged in or not, and if auth is set


  router.get(useridCallbackPath, function (req, res) {
    var userid = (req.user || {}).sub || 'no-authenticated-user';
    res.json({
      userid: userid,
      auth_set: authEnabled,
      user_authed: !!req.user
    });
  });
};

exports.applyMiddleware = applyMiddleware;
//# sourceMappingURL=endpoints.js.map
