import cookieParser from 'cookie-parser';
import session from 'express-session';
import bodyParser from 'body-parser';
import passport from 'passport';
import path from 'path';

import { generateNonce } from './util';

const cookieSecret = generateNonce();
const clientAuth = path.join(__dirname, 'authClientSide.html');

export const openidCallbackPath = process.env.OPENID_CALLBACK_ENDPOINT || '/auth/ping/callback';
export const useridCallbackPath = process.env.USERID_ENDPOINT || '/auth/userid';
export const logoutEndpointPath = process.env.LOGOUT_ENDPOINT || '/logout';
export const afterLogoutUrl = process.env.AFTER_LOGOUT_URL || '/';

export const applyMiddleware = (router, authEnabled, authMiddleware) => {
  if (authEnabled) {
    // setup express middleware to reading responses to and from federate/client
    router.use(cookieParser(cookieSecret));
    router.use(bodyParser.json());
    router.use(bodyParser.urlencoded({ extended: true }));

    router.use(session({ secret: cookieSecret, resave: false, saveUninitialized: false }));
    router.use(passport.initialize());
    router.use(passport.session());

    // set up auth checking middleware
    router.use(authMiddleware);

    router.use('/login',
      (req, res, next) => {
        const redirectUri = `${req.protocol}://${req.get('host')}${openidCallbackPath}`;
        const state = req.originalUrl;

        return passport.authenticate('oidc', { redirect_uri: redirectUri, state })(req, res, next);
      },
      (req, res) => {
        res.redirect(req.originalUrl || '/');
      });

    router.get(logoutEndpointPath,
      (req, res) => {
        req.logout();
        res.redirect(afterLogoutUrl);
      });

    router.use(openidCallbackPath, (req, res, next) => {
      const redirectUri = `${req.protocol}://${req.get('host')}${openidCallbackPath}`;

      // if there is no id token, it means we need to use client side js to get the hash parameter
      if (req.query.id_token) {
        const successRedirect = req.session.returnTo || '/';

        return passport.authenticate(
          'oidc',
          { successRedirect, failureRedirect: '/', redirect_uri: redirectUri },
        )(req, res, next);
      }

      return res.sendFile(clientAuth);
    });
  }

  // when a request for the userid is made, send it
  // default let the user know if they're logged in or not, and if auth is set
  router.get(useridCallbackPath, (req, res) => {
    const userid = (req.user || {}).sub || 'no-authenticated-user';

    res.json({
      userid,
      auth_set: authEnabled,
      user_authed: !!req.user,
    });
  });
};
