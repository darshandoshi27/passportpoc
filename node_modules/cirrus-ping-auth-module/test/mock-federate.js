const nock = require('nock');

const base = 'https://federate-qa.xh1.lilly.com';

const endpoints = {
  token: '/as/authorization.oauth2',
  discovery: '/.well-known/openid-configuration',
  jwks: '/pf/JWKS',
};

const lillyFederate = {
  issuer: 'https://federate-qa.xh1.lilly.com',
  authorization_endpoint: 'https://federate-qa.xh1.lilly.com/as/authorization.oauth2',
  token_endpoint: 'https://federate-qa.xh1.lilly.com/as/token.oauth2',
  revocation_endpoint: 'https://federate-qa.xh1.lilly.com/as/revoke_token.oauth2',
  userinfo_endpoint: 'https://federate-qa.xh1.lilly.com/idp/userinfo.openid',
  introspection_endpoint: 'https://federate-qa.xh1.lilly.com/as/introspect.oauth2',
  jwks_uri: 'https://federate-qa.xh1.lilly.com/pf/JWKS',
  registration_endpoint: 'https://federate-qa.xh1.lilly.com/as/clients.oauth2',
  ping_revoked_sris_endpoint: 'https://federate-qa.xh1.lilly.com/pf-ws/rest/sessionMgmt/revokedSris',
  ping_end_session_endpoint: 'https://federate-qa.xh1.lilly.com/idp/startSLO.ping',
  scopes_supported: ['auth_krb_qa', 'auth_adaptivemfa_qa', 'auth_iwa_dev', 'auth_admin_ds_dev', 'auth_form_qa', 'auth_mobileweb', 'auth_mobilewebbyod', 'auth_krb_dev', 'auth_krbmfa', 'auth_formmfa', 'auth_admin_ca_dev', 'auth_admin_ds', 'auth_krbmfa_dev', 'auth_mobilewebbyod_dev', 'auth_web', 'email', 'auth_iwa_qa', 'auth_web_qa', 'address', 'auth_form_dev', 'auth_mobileweb_dev', 'auth_mobility_dev', 'openid', 'auth_krb', 'profile', 'auth_krbmfa_qa', 'auth_admin_ca', 'auth_erms_refidmfa', 'auth_webmfa_qa', 'auth_mobility_qa', 'auth_adaptivemfa', 'auth_formmfa_qa', 'auth_admin_ds_qa', 'auth_mobilewebbyod_qa', 'phone', 'auth_form', 'auth_webmfa', 'auth_mobility', 'auth_web_dev', 'auth_webmfa_dev', 'auth_admin_ca_qa', 'auth_adaptivemfa_dev', 'auth_formmfa_dev', 'auth_iwa', 'auth_mobileweb_qa'],
  claims_supported: ['sub'],
  response_types_supported: ['code', 'token', 'id_token', 'code token', 'code id_token', 'token id_token', 'code token id_token'],
  response_modes_supported: ['fragment', 'query', 'form_post'],
  grant_types_supported: ['implicit', 'authorization_code', 'refresh_token', 'password', 'client_credentials', 'urn:pingidentity.com:oauth2:grant_type:validate_bearer', 'urn:ietf:params:oauth:grant-type:jwt-bearer', 'urn:ietf:params:oauth:grant-type:saml2-bearer'],
  subject_types_supported: ['public'],
  id_token_signing_alg_values_supported: ['none', 'HS256', 'HS384', 'HS512', 'RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512'],
  token_endpoint_auth_methods_supported: ['client_secret_basic', 'client_secret_post', 'private_key_jwt'],
  token_endpoint_auth_signing_alg_values_supported: ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512'],
  claim_types_supported: ['normal'],
  claims_parameter_supported: false,
  request_parameter_supported: true,
  request_uri_parameter_supported: false,
  request_object_signing_alg_values_supported: ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512'],
  request_object_encryption_alg_values_supported: [],
  request_object_encryption_enc_values_supported: [],
};

/* Full Keypair Set For Public/Private Keys Used Here
Use these keys to examine or update the JWT with https://jwt.io/
These are just for the purposes of the federate mocking,
and are test keys only. Don't use these elsewhere!

Algorithm: RS256

-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd
UWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs
HUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D
o2kQ+X5xK9cipRgEKwIDAQAB
-----END PUBLIC KEY-----

-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQDdlatRjRjogo3WojgGHFHYLugdUWAY9iR3fy4arWNA1KoS8kVw
33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQsHUfQrSDv+MuSUMAe8jzKE4qW
+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5Do2kQ+X5xK9cipRgEKwIDAQAB
AoGAD+onAtVye4ic7VR7V50DF9bOnwRwNXrARcDhq9LWNRrRGElESYYTQ6EbatXS
3MCyjjX2eMhu/aF5YhXBwkppwxg+EOmXeh+MzL7Zh284OuPbkglAaGhV9bb6/5Cp
uGb1esyPbYW+Ty2PC0GSZfIXkXs76jXAu9TOBvD0ybc2YlkCQQDywg2R/7t3Q2OE
2+yo382CLJdrlSLVROWKwb4tb2PjhY4XAwV8d1vy0RenxTB+K5Mu57uVSTHtrMK0
GAtFr833AkEA6avx20OHo61Yela/4k5kQDtjEf1N0LfI+BcWZtxsS3jDM3i1Hp0K
Su5rsCPb8acJo5RO26gGVrfAsDcIXKC+bQJAZZ2XIpsitLyPpuiMOvBbzPavd4gY
6Z8KWrfYzJoI/Q9FuBo6rKwl4BFoToD7WIUS+hpkagwWiz+6zLoX1dbOZwJACmH5
fSSjAkLRi54PKJ8TFUeOP15h9sQzydI8zJU+upvDEKZsZc/UhT/SySDOxQ4G/523
Y0sz/OZtSWcol/UMgQJALesy++GdvoIDLfJX5GBQpuFgFenRiRDabxrE9MNUZ2aP
FaFp+DyAe+b4nDwuJaW2LURbr8AEZga7oQj0uYxcYw==
-----END RSA PRIVATE KEY-----

Used https://8gwifi.org/jwkconvertfunctions.jsp to create JWKS
*/

nock.disableNetConnect();

nock.enableNetConnect('127.0.0.1');

nock(base)
  .get(endpoints.discovery)
  .reply(() => [404, {}])
  .get(endpoints.discovery)
  .times(100)
  .reply(() => [200, lillyFederate])
  .get(endpoints.jwks)
  .times(1)
  .reply(() => [200, {
    keys: [{
      kty: 'RSA', e: 'AQAB', kid: 'e2ad215f-037a-41db-9f0f-a71cd448baf8', n: '3ZWrUY0Y6IKN1qI4BhxR2C7oHVFgGPYkd38uGq1jQNSqEvJFcN93CYm16_G78FAFKWqwsJb3Wx-nbxDn6LtP4AhULB1H0K0g7_jLklDAHvI8yhOKlvoyvsUFPWtNxlJyh5JJXvkNKV_4Oo12e69f8QCuQ6NpEPl-cSvXIqUYBCs',
    }],
  }])
  .get(endpoints.userinfo)
  .times(1)
  .reply(() => [200, {
    sub: '1234567890',
    email: 'testemail@lilly.com',
  }]);
