{"version":3,"sources":["sessions.js"],"names":["session","require","RedisStore","REDIS_SECRET","process","env","client","Crypto","e","console","log","exit","REDIS_PASSWORD","redis","createClient","REDIS_URL","password","on","err","serializer","stringify","obj","hash","createHash","update","key","digest","slice","cipher","createCipheriv","Buffer","alloc","encrypted","JSON","parse","str","decipher","createDecipheriv","decrypted","toString","exception","Error","message","createSessionOpts","options","withStore","saveUninitialized","SESSION_SAVE_UNINITIALIZED","resave","SESSION_RESAVE","store","undefined","secret","COOKIE_SECRET","name","SESSION_COOKIE_NAME","cookie","httpOnly","SESSION_COOKIE_HTTP_ONLY","maxAge","SESSION_COOKIE_MAX_AGE","path","SESSION_COOKIE_PATH","sameSite","SESSION_COOKIE_SAME_SITE","secure","SESSION_COOKIE_SECURE","proxy","SESSION_PROXY","rolling","SESSION_ROLLING","unset","SESSION_UNSET","sessionOpts","app","use"],"mappings":"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","sourcesContent":["/* eslint no-console: 0 */\nimport redis from 'redis';\nimport uuid from 'uuid/v4';\n\nconst session = require('express-session');\nconst RedisStore = require('connect-redis')(session);\n\nconst { REDIS_SECRET } = process.env;\n\nlet client;\nlet Crypto;\ntry {\n  Crypto = require('crypto'); // eslint-disable-line\n} catch (e) {\n  console.log('Could not initialize crypto library. Quitting.');\n  process.exit(1);\n}\n\n/* Depending what enviroment the user is in depends on what REDIS is being used.\n   As Redis is only be used for AUTH, AUTH has to be set to true */\nif (process.env.REDIS_PASSWORD) {\n  client = redis.createClient(process.env.REDIS_URL, {\n    password: process.env.REDIS_PASSWORD,\n  });\n} else {\n  client = redis.createClient(process.env.REDIS_URL);\n}\n\nclient.on('error', (err) => console.log(`[REDIS] ${err}`));\n\nconst serializer = {\n  stringify: (obj) => {\n    const hash = Crypto.createHash('sha1');\n    hash.update(REDIS_SECRET);\n    const key = hash.digest('hex').slice(0, 32);\n\n    const cipher = Crypto.createCipheriv('aes-256-cbc', key, Buffer.alloc(16));\n    let encrypted = cipher.update(JSON.stringify(obj), 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    return encrypted;\n  },\n  parse: (str) => {\n    try {\n      const hash = Crypto.createHash('sha1');\n      hash.update(REDIS_SECRET);\n      const key = hash.digest('hex').slice(0, 32);\n\n      const decipher = Crypto.createDecipheriv(\n        'aes-256-cbc',\n        key,\n        Buffer.alloc(16),\n      );\n\n      let decrypted = decipher.update(str, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      return JSON.parse(decrypted.toString());\n    } catch (exception) {\n      throw new Error(exception.message);\n    }\n  },\n};\n\nconst createSessionOpts = (options, withStore = false) => ({\n  saveUninitialized: options.SESSION_SAVE_UNINITIALIZED === 'true',\n  resave: options.SESSION_RESAVE === 'true',\n  store: withStore ? new RedisStore({ client, serializer }) : undefined,\n  secret: options.COOKIE_SECRET || uuid(),\n  name: options.SESSION_COOKIE_NAME || 'lilly.id',\n  cookie: {\n    httpOnly: (options.SESSION_COOKIE_HTTP_ONLY !== 'false'),\n    maxAge: +(options.SESSION_COOKIE_MAX_AGE) || 1800000,\n    path: options.SESSION_COOKIE_PATH || '/',\n    sameSite: options.SESSION_COOKIE_SAME_SITE || undefined,\n    secure: options.SESSION_COOKIE_SECURE === 'true' || undefined,\n  },\n  proxy: options.SESSION_PROXY ? options.SESSION_PROXY === 'true' : undefined,\n  rolling: options.SESSION_ROLLING === 'true',\n  unset: options.SESSION_UNSET || 'keep',\n});\n\n// Passport does not directly manage your session, it only uses the session.\n// So you configure session attributes (e.g. life of your session) via express\nconst sessionOpts = createSessionOpts(process.env, true);\n\nexport default (app) => app.use(session(sessionOpts));\nexport { createSessionOpts, serializer };\n"],"file":"sessions.js"}