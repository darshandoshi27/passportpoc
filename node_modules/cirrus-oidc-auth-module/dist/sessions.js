"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializer = exports.createSessionOpts = exports["default"] = void 0;

var _redis = _interopRequireDefault(require("redis"));

var _v = _interopRequireDefault(require("uuid/v4"));

/* eslint no-console: 0 */
var session = require('express-session');

var RedisStore = require('connect-redis')(session);

var REDIS_SECRET = process.env.REDIS_SECRET;
var client;
var Crypto;

try {
  Crypto = require('crypto'); // eslint-disable-line
} catch (e) {
  console.log('Could not initialize crypto library. Quitting.');
  process.exit(1);
}
/* Depending what enviroment the user is in depends on what REDIS is being used.
   As Redis is only be used for AUTH, AUTH has to be set to true */


if (process.env.REDIS_PASSWORD) {
  client = _redis["default"].createClient(process.env.REDIS_URL, {
    password: process.env.REDIS_PASSWORD
  });
} else {
  client = _redis["default"].createClient(process.env.REDIS_URL);
}

client.on('error', function (err) {
  return console.log("[REDIS] ".concat(err));
});
var serializer = {
  stringify: function stringify(obj) {
    var hash = Crypto.createHash('sha1');
    hash.update(REDIS_SECRET);
    var key = hash.digest('hex').slice(0, 32);
    var cipher = Crypto.createCipheriv('aes-256-cbc', key, Buffer.alloc(16));
    var encrypted = cipher.update(JSON.stringify(obj), 'utf8', 'hex');
    encrypted += cipher["final"]('hex');
    return encrypted;
  },
  parse: function parse(str) {
    try {
      var hash = Crypto.createHash('sha1');
      hash.update(REDIS_SECRET);
      var key = hash.digest('hex').slice(0, 32);
      var decipher = Crypto.createDecipheriv('aes-256-cbc', key, Buffer.alloc(16));
      var decrypted = decipher.update(str, 'hex', 'utf8');
      decrypted += decipher["final"]('utf8');
      return JSON.parse(decrypted.toString());
    } catch (exception) {
      throw new Error(exception.message);
    }
  }
};
exports.serializer = serializer;

var createSessionOpts = function createSessionOpts(options) {
  var withStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return {
    saveUninitialized: options.SESSION_SAVE_UNINITIALIZED === 'true',
    resave: options.SESSION_RESAVE === 'true',
    store: withStore ? new RedisStore({
      client: client,
      serializer: serializer
    }) : undefined,
    secret: options.COOKIE_SECRET || (0, _v["default"])(),
    name: options.SESSION_COOKIE_NAME || 'lilly.id',
    cookie: {
      httpOnly: options.SESSION_COOKIE_HTTP_ONLY !== 'false',
      maxAge: +options.SESSION_COOKIE_MAX_AGE || 1800000,
      path: options.SESSION_COOKIE_PATH || '/',
      sameSite: options.SESSION_COOKIE_SAME_SITE || undefined,
      secure: options.SESSION_COOKIE_SECURE === 'true' || undefined
    },
    proxy: options.SESSION_PROXY ? options.SESSION_PROXY === 'true' : undefined,
    rolling: options.SESSION_ROLLING === 'true',
    unset: options.SESSION_UNSET || 'keep'
  };
}; // Passport does not directly manage your session, it only uses the session.
// So you configure session attributes (e.g. life of your session) via express


exports.createSessionOpts = createSessionOpts;
var sessionOpts = createSessionOpts(process.env, true);

var _default = function _default(app) {
  return app.use(session(sessionOpts));
};

exports["default"] = _default;
//# sourceMappingURL=sessions.js.map
