{"version":3,"sources":["auth.js"],"names":["AUTH_ENABLED","process","env","OPENID_SCOPE","OPENID_CALLBACK","useridEndpoint","USERID_ENDPOINT","REFRESH_WINDOW","ensureLogin","OPENID_ISSUER","issuer","client","Number","isNaN","log","error","warn","exit","info","requiredEnvVars","missingVars","reduce","acc","cur","push","length","join","ignoredRoutes","ignore","Array","isArray","passport","serializeUser","user","cb","deserializeUser","discoverIssuerWithRetries","retries","Promise","resolve","reject","Issuer","discover","then","openidIssuer","Error","e","authMiddleware","req","res","next","tokenWasAbleToBeRefreshed","session","refresh_token","expDate","Date","expires_at","now","diff","Math","trunc","refresh","tokenSet","success","Object","assign","destroy","mediaTypes","Accept","headers","accept","includes","redirect","originalUrl","status","send","path","keys","query","filter","key","forEach","authenticate","router","set","use","bodyParser","json","urlencoded","extended","initialize","redirectUri","protocol","get","state","redirect_uri","code","successRedirect","returnTo","failureRedirect","userid","sub","auth_set","user_authed","Client","client_id","OPENID_CLIENT_ID","client_secret","OPENID_CLIENT_SECRET","custom","http_options","options","timeout","params","response_type","scope","response_mode","Strategy","tokenset","done","claims","uid"],"mappings":"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","sourcesContent":["import Accept from 'accept';\nimport bodyParser from 'body-parser';\nimport { ensureLoggedIn } from 'connect-ensure-login';\nimport { Strategy, Issuer, custom } from 'openid-client';\nimport passport from 'passport';\nimport * as log from './logger';\nimport session from './sessions';\nimport issuer from './openid-vars';\n\nconst AUTH_ENABLED = process.env.AUTH_ENABLED === 'true';\nconst OPENID_SCOPE = process.env.OPENID_SCOPE || 'openid';\nconst OPENID_CALLBACK = process.env.OPENID_CALLBACK || '/auth/callback';\nconst useridEndpoint = process.env.USERID_ENDPOINT || '/auth/userid';\nconst REFRESH_WINDOW = +(process.env.REFRESH_WINDOW || '300');\nconst ensureLogin = ensureLoggedIn();\nconst OPENID_ISSUER = issuer;\nlet client;\n\nif (Number.isNaN(REFRESH_WINDOW)) {\n  log.error(\n    'The REFRESH_WINDOW environment variable could not be coerced to a number.',\n  );\n  log.warn('The process will now exit.');\n  process.exit(1);\n}\n\nlog.info('Using openid-connect auth v4.0.6');\n\nif (!AUTH_ENABLED) {\n  log.warn('Authentication is off. To enable set AUTH_ENABLED to true in .env');\n}\n\nconst requiredEnvVars = [\n  'OPENID_CLIENT_ID',\n  'OPENID_CLIENT_SECRET',\n  'REDIS_URL',\n  'REDIS_SECRET',\n];\n\n// check that all environment variables are present\nconst missingVars = requiredEnvVars.reduce((acc, cur) => {\n  if (!process.env[cur]) acc.push(cur);\n  return acc;\n}, []);\n\n// if there are missing environment variables, log them\nif (missingVars.length > 0) {\n  log.error('The following environment variables are missing!');\n  log.error(`\\n -- ${missingVars.join('\\n -- ')}`);\n  log.error('Please note variables are CASE SENSITIVE.');\n  // die if env vars are missing\n  log.warn('The process will now exit.');\n  process.exit(1);\n}\n\nconst ignoredRoutes = [];\n\nexport const ignore = (...ignoredRoutesIn) => {\n  if (Array.isArray(ignoredRoutesIn[0])) {\n    ignoredRoutes.push(...ignoredRoutesIn[0]);\n  } else {\n    ignoredRoutes.push(...ignoredRoutesIn);\n  }\n\n  log.info('The following routes are ignored: ');\n  log.info(ignoredRoutes.join(' '));\n\n  return ignoredRoutes;\n};\n\npassport.serializeUser((user, cb) => {\n  cb(null, user);\n});\n\npassport.deserializeUser((user, cb) => {\n  cb(null, user);\n});\n\n/**\n * Function to discover the openid issuer, with retries.\n * the Issuer.discover function exposed by openid-client will break\n * if the issuer is not discovered. This custom function will retry\n * a specified number of times before failing, avoiding crashing\n * when there is a small network hiccup. The try/catch block is necessary\n * because if a non-url is passed to Issuer.discover, it will break\n */\nexport const discoverIssuerWithRetries = async (retries = 5) => new Promise((resolve, reject) => {\n  try {\n    Issuer.discover(OPENID_ISSUER).then((openidIssuer) => {\n      log.info(`Discovered issuer: ${OPENID_ISSUER}`);\n      resolve(openidIssuer);\n    }).catch(async () => {\n      if (retries <= 0) {\n        log.error('Could not discover OpenID issuer!');\n        reject(new Error('Could not discover OpenID issuer'));\n      } else {\n        log.info('Could not discover OpenID issuer, retrying...');\n        const openidIssuer = discoverIssuerWithRetries(retries - 1);\n        resolve(openidIssuer);\n      }\n    });\n  } catch (e) {\n    log.error(e);\n    log.error(`Could not discover issuer: ${OPENID_ISSUER}`);\n    log.error('Check the URL is correct and that there is Internet connectivity');\n    log.error('The process will now exit.');\n    process.exit(1);\n  }\n});\n\n/**\n * middleware that authenticates the express router\n * @param  {Object}   req  request object from express router\n * @param  {Object}   res  response object from express router\n * @param  {Function} next function to move on to the next bit of middleware\n */\nexport const authMiddleware = async (req, res, next) => {\n  let tokenWasAbleToBeRefreshed = true;\n\n  if (!!req.session.passport && !!req.session.passport.user\n    && !!req.session.passport.user.refresh_token) {\n    const { user } = req.session.passport;\n    log.info(`refresh token found! ${user.refresh_token}`);\n    const expDate = new Date((+user.expires_at) * 1000);\n    const now = new Date();\n    const diff = Math.trunc((expDate - now) / 1000);\n\n    if (diff < REFRESH_WINDOW) {\n      log.info('Refresh flow invoked');\n      await client.refresh(user.refresh_token)\n        .then((tokenSet) => {\n          log.success('Refresh token get. Applying to session');\n          Object.assign(user, tokenSet);\n        })\n        .catch(() => {\n          log.error('Could not refresh token. Destroying session.');\n          req.session.destroy();\n          tokenWasAbleToBeRefreshed = false;\n        });\n    }\n  }\n\n  if (!tokenWasAbleToBeRefreshed) {\n    const mediaTypes = Accept.mediaTypes(req.headers.accept);\n\n    if (mediaTypes.includes('text/html')) {\n      return res.redirect(req.originalUrl || '/');\n    } if (mediaTypes.includes('application/json')) {\n      res.status(403);\n      return res.send({ status: '403', error: 'no longer authenticated' });\n    }\n\n    return res.status(403);\n  }\n\n  // allow a user through if we've disabled auth or they've ignored a route\n  if (!AUTH_ENABLED || ignoredRoutes.includes(req.path)) {\n    // pass through to next request\n    log.info(`Serving ${req.path} to verified user`);\n\n    Object.keys(req.query || {})\n      .filter((key) => key !== 'id_token')\n      .forEach((key) => log.info(`Param ${key}: ${req.query[key]}`));\n\n    return next();\n  }\n\n  return ensureLogin(req, res, next);\n};\n\nexport const authenticate = async (router) => {\n  /*\n    When on Heroku, 'trust proxy' must be\n    set to forward important connection information.\n  */\n  router.set('trust proxy', true);\n\n  router.use(bodyParser.json());\n  router.use(bodyParser.urlencoded({ extended: true }));\n  // set the router/app up with redis session storage\n  session(router);\n\n  router.use(passport.initialize());\n  router.use(passport.session());\n\n  router.use('/login', (req, res, next) => {\n    log.info('Serving /login');\n    const redirectUri = `${req.protocol}://${req.get('host')}${OPENID_CALLBACK}`;\n\n    const state = req.originalUrl;\n\n    return passport.authenticate(\n      'oidc',\n      { redirect_uri: redirectUri, state },\n    )(req, res, next);\n  },\n  (req, res) => {\n    res.redirect(req.originalUrl || '/');\n  });\n\n  router.use(OPENID_CALLBACK, (req, res, next) => {\n    log.info(`Serving ${OPENID_CALLBACK}`);\n    const redirectUri = `${req.protocol}://${req.get('host')}${OPENID_CALLBACK}`;\n    if (req.query.code) {\n      const successRedirect = req.session.returnTo || '/';\n\n      return passport.authenticate(\n        'oidc',\n        { successRedirect, failureRedirect: '/', redirect_uri: redirectUri },\n      )(req, res, next);\n    }\n\n    return res.redirect('/');\n  });\n\n  router.get(useridEndpoint, (req, res) => {\n    log.info(`Serving ${useridEndpoint}`);\n    const userid = (req.user || {}).sub || 'no-authenticated-user';\n    log.info(`userid: ${userid}`);\n    res.json({\n      userid,\n      auth_set: AUTH_ENABLED,\n      user_authed: !!req.user,\n    });\n  });\n\n  router.get('/logout', (req, res) => {\n    log.info('Serving /logout');\n    req.session.destroy();\n    res.send('signed out');\n  });\n\n  // use our auth middleware AFTER authentication flow routes\n  // so unauthenticated users can access auth flow\n  router.use(authMiddleware);\n\n  /* istanbul ignore next */\n  const openidIssuer = await discoverIssuerWithRetries()\n    .catch(() => {\n      log.error(`Could not discover issuer: ${OPENID_ISSUER}`);\n      log.error('Check that you have spelled the URL correctly,'\n        + ' and that the internet is up.');\n      log.error('The process will now exit.');\n      process.exit(1);\n    });\n\n  client = new openidIssuer.Client({\n    client_id: process.env.OPENID_CLIENT_ID,\n    client_secret: process.env.OPENID_CLIENT_SECRET,\n  });\n  client[custom.http_options] = (options) => {\n    options.timeout = 10000;\n    return options;\n  };\n  const params = {\n    response_type: 'code',\n    scope: OPENID_SCOPE,\n    response_mode: 'query',\n  };\n\n  passport.use(\n    'oidc',\n    new Strategy({ client, params },\n      (tokenset, done) => {\n        tokenset.claims = tokenset.claims();\n        tokenset.sub = tokenset.claims.sub;\n        if (tokenset.claims.uid) {\n          log.info(`User has been authenticated: ${tokenset.claims.uid}`);\n        } else {\n          log.info(`User has been authenticated: ${tokenset.claims.sub}`);\n        }\n        return done(null, tokenset);\n      }),\n  );\n\n  return router;\n};\n"],"file":"auth.js"}