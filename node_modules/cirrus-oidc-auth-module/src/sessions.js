/* eslint no-console: 0 */
import redis from 'redis';
import uuid from 'uuid/v4';

const session = require('express-session');
const RedisStore = require('connect-redis')(session);

const { REDIS_SECRET } = process.env;

let client;
let Crypto;
try {
  Crypto = require('crypto'); // eslint-disable-line
} catch (e) {
  console.log('Could not initialize crypto library. Quitting.');
  process.exit(1);
}

/* Depending what enviroment the user is in depends on what REDIS is being used.
   As Redis is only be used for AUTH, AUTH has to be set to true */
if (process.env.REDIS_PASSWORD) {
  client = redis.createClient(process.env.REDIS_URL, {
    password: process.env.REDIS_PASSWORD,
  });
} else {
  client = redis.createClient(process.env.REDIS_URL);
}

client.on('error', (err) => console.log(`[REDIS] ${err}`));

const serializer = {
  stringify: (obj) => {
    const hash = Crypto.createHash('sha1');
    hash.update(REDIS_SECRET);
    const key = hash.digest('hex').slice(0, 32);

    const cipher = Crypto.createCipheriv('aes-256-cbc', key, Buffer.alloc(16));
    let encrypted = cipher.update(JSON.stringify(obj), 'utf8', 'hex');
    encrypted += cipher.final('hex');
    return encrypted;
  },
  parse: (str) => {
    try {
      const hash = Crypto.createHash('sha1');
      hash.update(REDIS_SECRET);
      const key = hash.digest('hex').slice(0, 32);

      const decipher = Crypto.createDecipheriv(
        'aes-256-cbc',
        key,
        Buffer.alloc(16),
      );

      let decrypted = decipher.update(str, 'hex', 'utf8');
      decrypted += decipher.final('utf8');
      return JSON.parse(decrypted.toString());
    } catch (exception) {
      throw new Error(exception.message);
    }
  },
};

const createSessionOpts = (options, withStore = false) => ({
  saveUninitialized: options.SESSION_SAVE_UNINITIALIZED === 'true',
  resave: options.SESSION_RESAVE === 'true',
  store: withStore ? new RedisStore({ client, serializer }) : undefined,
  secret: options.COOKIE_SECRET || uuid(),
  name: options.SESSION_COOKIE_NAME || 'lilly.id',
  cookie: {
    httpOnly: (options.SESSION_COOKIE_HTTP_ONLY !== 'false'),
    maxAge: +(options.SESSION_COOKIE_MAX_AGE) || 1800000,
    path: options.SESSION_COOKIE_PATH || '/',
    sameSite: options.SESSION_COOKIE_SAME_SITE || undefined,
    secure: options.SESSION_COOKIE_SECURE === 'true' || undefined,
  },
  proxy: options.SESSION_PROXY ? options.SESSION_PROXY === 'true' : undefined,
  rolling: options.SESSION_ROLLING === 'true',
  unset: options.SESSION_UNSET || 'keep',
});

// Passport does not directly manage your session, it only uses the session.
// So you configure session attributes (e.g. life of your session) via express
const sessionOpts = createSessionOpts(process.env, true);

export default (app) => app.use(session(sessionOpts));
export { createSessionOpts, serializer };
