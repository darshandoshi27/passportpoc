const path = require('path');
const nock = require('nock');

const base = 'https://login.microsoftonline.com/18a59a81-eea8-4c30-948a-d8824cdc2580';

const endpoints = {
  token: '/oauth2/v2.0/token',
  discovery: '/v2.0/.well-known/openid-configuration',
};

const wellKnownOpenIdConfiguration = {
  token_endpoint: 'https://login.microsoftonline.com/18a59a81-eea8-4c30-948a-d8824cdc2580/oauth2/v2.0/token',
  token_endpoint_auth_methods_supported: ['client_secret_post', 'private_key_jwt', 'client_secret_basic'],
  jwks_uri: 'https://login.microsoftonline.com/18a59a81-eea8-4c30-948a-d8824cdc2580/discovery/v2.0/keys',
  response_modes_supported: ['query', 'fragment', 'form_post'],
  subject_types_supported: ['pairwise'],
  id_token_signing_alg_values_supported: ['RS256'],
  response_types_supported: ['code', 'id_token', 'code id_token', 'id_token token'],
  scopes_supported: ['openid', 'profile', 'email', 'offline_access'],
  issuer: 'https://login.microsoftonline.com/18a59a81-eea8-4c30-948a-d8824cdc2580/v2.0',
  request_uri_parameter_supported: false,
  userinfo_endpoint: 'https://graph.microsoft.com/oidc/userinfo',
  authorization_endpoint: 'https://login.microsoftonline.com/18a59a81-eea8-4c30-948a-d8824cdc2580/oauth2/v2.0/authorize',
  http_logout_supported: true,
  frontchannel_logout_supported: true,
  end_session_endpoint: 'https://login.microsoftonline.com/18a59a81-eea8-4c30-948a-d8824cdc2580/oauth2/v2.0/logout',
  claims_supported: ['sub', 'iss', 'cloud_instance_name', 'cloud_instance_host_name', 'cloud_graph_host_name', 'msgraph_host', 'aud', 'exp', 'iat', 'auth_time', 'acr', 'nonce', 'preferred_username', 'name', 'tid', 'ver', 'at_hash', 'c_hash', 'email'],
  tenant_region_scope: 'NA',
  cloud_instance_name: 'microsoftonline.com',
  cloud_graph_host_name: 'graph.windows.net',
  msgraph_host: 'graph.microsoft.com',
  rbac_url: 'https://pas.windows.net',
};

const replace = (object, property, value) => {
  const originalProperty = Object.getOwnPropertyDescriptor(object, property);
  Object.defineProperty(object, property, { value });
  return originalProperty;
};

nock.disableNetConnect();

nock.enableNetConnect('127.0.0.1');

nock(base)
  .get(endpoints.discovery)
  .times(100)
  .reply(() => [200, wellKnownOpenIdConfiguration]);

process.env.OPENID_CLIENT_SECRET = 'test-secret';
process.env.OPENID_CLIENT_ID = 'test-id';
process.env.REDIS_URL = 'redis://localhost';
process.env.REDIS_SECRET = 'test-secret';
process.env.ENABLE_AUTH_LOGGING = true;
process.env.AUTH_ENABLED = true;
process.env.CF_CALLBACK_URL = 'test-value';
process.env.CF_CLIENT_ID = 'test-value';
process.env.CF_CLIENT_SECRET = 'test-value';
process.env.SESSION_SECRET = 'test-value';
process.env.AUTH_REQUIRED = 'test-value';

const authTypes = ['openid-implicit', 'openid-connect', 'invalid-auth-type'];

describe('Auth Module', () => {
  beforeEach(() => {
    jest.resetModules();
    const redis = require('redis');
    const redisMock = require('redis-mock');
    replace(redis, 'createClient', redisMock.createClient);
  });

  authTypes.forEach((type) => {
    describe(`${type} flow`, () => {
      let auth;

      beforeAll(() => {
        process.env.AUTH_TYPE = type;
        auth = require(path.join(__dirname, '..', 'dist', 'index'));
      });

      it('should exist', () => {
        expect(auth).not.toBeNull();
      });

      it('should expose authenticate function', () => {
        expect(auth.authenticate).toBeInstanceOf(Function);
      });

      if (type !== 'sf') {
        it('should expose ignore function', () => {
          expect(auth.ignore).toBeInstanceOf(Function);
        });
      }

      it('should expose default object', () => {
        expect(typeof auth.default).toBe('object');
      });
    });
  });
});
